1)Имеем несколько классов, которые между собой взаимодействуют, достаточно ли объявить их в main`e или необходимо вызывать в каждом из классов, который с ними оперирует?
2)//Можем ли мы в нашем примере обращаться к классам без использования методов, просто считывая поля экземпляров, либо создавать методы в каждом из классов, которые будут возвращать параметры экземпляра
3)//Примеры реального использования связанных списков?
4)Разница между передачей по ссылке и по значению
5)//При вызове конструктора использовать внутри него метод, нормальная ли практика?
6)Есть некий класс, объекты котрого хранятся в Set и маппируются в HashMap, при изменении параметров объекта класса, обязательно ли создавать для этого функцию, или достаточно заново создать экземпляр с таким именем, тогда по идее в Set он перезапишется, как и в HashMap,а если является ключом то новой записи не должно добавляться  
//7)Создать структуру древовидную структуру
8)Kак инициализировать массив данными при инициализации
//9) Две функции ниже при вызове второй стек переполняется, верно ли, что это из-за того, что метод toString пытаясь привести все аргументы к строке и видя this вызывает для него как раз сам себя?
public void print() {
        logger.info("{}","Hall " + this + "\nAddress: " + address + "\nGameTime: " + gameTime);
    }

    @Override
    public String toString() {
        return "Hall " + this + "\nAddress: " + address + "\nGameTime: " + gameTime;//"The best hall ever";
    }
//10) Аналогичный вопрос как с методами, вызов конструктора другого класса при создании объекта текущего ( ответ видимо аналогичен, но на всякий случай )
//11) ЭТО для себя : проверить, что будет если геттером или выводом в консоль считать неинициализированную в конструкторе переменную класса  - NULL, если массив или коллекция - []
12) Как правильно ловить  и обрабатывать исключения, например в случаях, когда какой то из параметров класса не объявлен, например в классе Schedule для toString в качетсве одного
   из аргументов хочу использовать геттер переменной класса (gameTime.getDayOfWeek()), если gameTime не объявлен, то появляется NullPointException. В каждом месте, где такое потенциально
   возможно использовать try, catch? А в обработке исключения присваивать некое дефолтное значение неинициализированному параметру, либо просить пользователя ?
   Изначально переменная не инициализированна, потому что ее инициализация происходит вызовом некоторых методов других переменных этого класса( чтобы узнать время игры
  мы идем в зал, ищем там указанное расписание дней недели и промежутка времени для игры и геттерами оттуда его вытягиваем на верхний уровень, где анализируем в какой конкретный
  день можно его назначить )
//13) Что все таки со satic-членами? Стараться их не использовать никогда?
14) Нужен интерфейс, реализующий вычисление среднего значения полей классов типа лист или сет. Поскольку он работает с приватными полями, в методы публичного априори интрфейса 
нельзя передать ссылки на эти поля, таким образом методы не принимают аргументов, но должны иметь разные реализации для нескольких полей, даже если они представлены одним и тем же дженериком.
В моем случае, есть поле средний рост команды и средний возраст, разные методы подсчета  среднего в обоих случаях. Обращаются они к одному и тому же сету игроков и по нему вычисляется среднее. 
Как быть?
15) Мне необходимо поле класса, которое необходимо инициализировать лищь раз, но необязательно при создании экземпляра класса, а в другой рантайм момент. Final поле не подойдет,
в данном случае наследовать класс с включением в дочерний данного поля как файнал?
16) Как получить доступ к методам класса, реализующего некоторый интерфейс, из класса, который имеет этот интерфейс в качестве одного из своих полей
17) Поле, которое сериализируется, следует использовать только как посредник к файлу?
